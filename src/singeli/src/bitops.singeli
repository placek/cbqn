def ones{T, n} = (cast{T,1}<<cast{T,n}) - 1

def b_get{x:*u64, n:(Size)} = {
  ((load{x,n>>6}>>(n&63)) & 1) != 0
}

def b_set{x:*u64, n:(Size), v:u1} = {
  m:u64 = cast{u64,1}<<(n&63)
  p:u64 = load{x,n>>6}
  if (v) store{x,n>>6,p |  m}
  else   store{x,n>>6,p & ~m}
}

def b_set{sz, x:*u64, n:(Size), v} = { vc:u64 = cast_i{u64,v}
  am:u64 = 64/sz;
  w:u64 = load{x,n/am}
  sh:u64 = (n&(am-1)) * sz
  w = w & ~(ones{u64,sz}<<sh)
  w = w | (vc<<sh)
  store{x, n/am, w}
}

def b_set{sz, x:*u64, n:(Size), v & sz==4} = {
  x8:= cast_p{*u8, x}
  
  #w:u64 = cast_i{u64, load{x8,n/2}}
  #sh:u64 = (n&1) * 4
  #w = w & ~(15<<sh)
  #w = w |  (cast_i{u64,v}<<sh)
  
  w:u8 = load{x8,n/2}
  if ((n&1)==1) {
    w = w & ~(cast  {u8,15}<<4)
    w = w |  (cast_i{u8,v}<<4)
  } else {
    w = w & ~(cast  {u8,15})
    w = w |  (cast_i{u8,v}<<0)
  }
  
  store{x8, n/2, cast_i{u8,w}}
}
def b_set{sz, x:*u64, n:(Size), v & sz== 8} = store{cast_p{*u8,  x}, n, cast_i{u8, v}}
def b_set{sz, x:*u64, n:(Size), v & sz==16} = store{cast_p{*u16, x}, n, cast_i{u16,v}}
def b_set{sz, x:*u64, n:(Size), v & sz==32} = store{cast_p{*u32, x}, n, cast_i{u32,v}}
def b_set{sz, x:*u64, n:(Size), v & sz==64} = store{x,               n, cast_i{u64,v}}
